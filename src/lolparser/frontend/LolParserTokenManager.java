/* Generated By:JJTree&JavaCC: Do not edit this line. LolParserTokenManager.java */
package lolparser.frontend;
import java.io.FileReader;
import java.io.FileNotFoundException;

/** Token Manager. */
public class LolParserTokenManager implements LolParserConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x400001004000000L) != 0L)
         {
            jjmatchedKind = 62;
            return 3;
         }
         if ((active0 & 0xbe96f6f7b740720L) != 0L || (active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 62;
            return 20;
         }
         if ((active0 & 0x100080004000L) != 0L)
            return 13;
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 62;
            return 8;
         }
         if ((active0 & 0x1200800003b802L) != 0L)
            return 20;
         return -1;
      case 1:
         if ((active0 & 0x80000L) != 0L)
            return 7;
         if ((active0 & 0x30000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0xfe17cffff700f20L) != 0L || (active1 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 1;
            }
            return 20;
         }
         if ((active0 & 0x1a000000078000L) != 0L)
            return 20;
         return -1;
      case 2:
         if ((active0 & 0x140000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x30000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0xdc348be3f700020L) != 0L || (active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 2;
            return 20;
         }
         if ((active0 & 0x2202041c0000f00L) != 0L)
            return 20;
         return -1;
      case 3:
         if ((active0 & 0xd8308b809000000L) != 0L || (active1 & 0x1L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 3;
            }
            return 20;
         }
         if ((active0 & 0x140000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x30000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x40400636700020L) != 0L)
            return 20;
         return -1;
      case 4:
         if ((active0 & 0x140000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x30000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x98300b028200000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 4;
            return 20;
         }
         if ((active0 & 0x400080801000000L) != 0L)
            return 20;
         return -1;
      case 5:
         if ((active0 & 0x140000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x8000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x10000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x183000020200000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 5;
            return 20;
         }
         if ((active0 & 0x800003008000000L) != 0L)
            return 20;
         return -1;
      case 6:
         if ((active0 & 0x102000020000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 6;
            return 20;
         }
         if ((active0 & 0x8000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x81000000200000L) != 0L)
            return 20;
         return -1;
      case 7:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 7;
            return 20;
         }
         if ((active0 & 0x8000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 62;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x100000020000000L) != 0L)
            return 20;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L);
      case 63:
         return jjStopAtPos(0, 47);
      case 65:
         jjmatchedKind = 12;
         return jjMoveStringLiteralDfa1_0(0x10008000000000L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x400001004000000L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x200L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x40000020000000L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x0L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0x500L, 0x0L);
      case 73:
         jjmatchedKind = 13;
         return jjMoveStringLiteralDfa1_0(0x2000000038800L, 0x0L);
      case 75:
         return jjMoveStringLiteralDfa1_0(0x300000L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x200080000000000L, 0x0L);
      case 78:
         jjmatchedKind = 14;
         return jjMoveStringLiteralDfa1_0(0x100080000000L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x8630800000020L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x80004000000000L, 0x0L);
      case 81:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x0L);
      case 82:
         return jjStartNfaWithStates_0(0, 1, 20);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x820000010000000L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x501000000L, 0x1L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x240000000L, 0x0L);
      case 89:
         return jjMoveStringLiteralDfa1_0(0x40000040000L, 0x0L);
      default :
         return jjMoveNfa_0(4, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa2_0(active0, 0x30000000000L, active1, 0L);
      case 33:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x40012000700L, active1, 0L);
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L);
      case 70:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 51, 20);
         break;
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x441203328000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0x1L);
      case 77:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(1, 15, 20);
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L);
      case 78:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 52, 20);
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x2001000c4400000L, active1, 0L);
      case 80:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(1, 19, 7);
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0L);
      case 82:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(1, 18, 20);
         return jjMoveStringLiteralDfa2_0(active0, 0x80000001000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x300800L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x120000800000000L, active1, 0L);
      case 87:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0L);
      case 90:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(1, 17, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa3_0(active0, 0x140000000000L, active1, 0L);
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000400000000L, active1, 0L);
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0L);
      case 67:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 45, 20);
         break;
      case 68:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 57, 20);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x400010000000L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000020000000L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0x400001000000000L, active1, 0L);
      case 72:
         return jjMoveStringLiteralDfa3_0(active0, 0x300000L, active1, 0L);
      case 73:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 20);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L, active1, 0L);
      case 76:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 32, 20);
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0L);
      case 77:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 53, 20);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L, active1, 0L);
      case 78:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 9, 20);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 30, 20);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x180000001400000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0L);
      case 83:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 20);
         return jjMoveStringLiteralDfa3_0(active0, 0x1008000000000L, active1, 0L);
      case 84:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 31, 20);
         return jjMoveStringLiteralDfa3_0(active0, 0x80c000020L, active1, 0L);
      case 86:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0L);
      case 90:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 11, 20);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 38, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0L);
      case 69:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 20);
         break;
      case 70:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa4_0(active0, 0x400001000000000L, active1, 0L);
      case 72:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 20);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x3000000000000L, active1, 0L);
      case 76:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 20);
         return jjMoveStringLiteralDfa4_0(active0, 0x800020000000000L, active1, 0L);
      case 77:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 20);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L, active1, 0L);
      case 78:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 20);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 20);
         break;
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x10001000000L, active1, 0L);
      case 80:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 20);
         break;
      case 82:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 62, 20);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L, active1, 0L);
      case 87:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 5, 20);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L, active1, 0L);
      case 88:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 20);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L);
      case 66:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000200000L);
      case 69:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 43, 20);
         return jjMoveStringLiteralDfa5_0(active0, 0x13008000000L);
      case 70:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 20);
         break;
      case 72:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x800040000000000L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L);
      case 82:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 58, 20);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L);
      case 83:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L);
      case 89:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(4, 41);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L);
      case 72:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 37, 20);
         break;
      case 73:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(5, 44);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000020000000L);
      case 75:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000000L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000L);
      case 82:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 27, 20);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 20);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 59, 20);
         break;
      case 83:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(5, 40);
         break;
      case 85:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000000L);
      case 89:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(5, 42);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L);
      case 69:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 21, 20);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 48, 20);
         break;
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000020000000L);
      case 84:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 55, 20);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 72:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L);
      case 76:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000L);
      case 84:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 29, 20);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 56, 20);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 49, 20);
         break;
      case 88:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(8, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 25;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     jjCheckNAdd(19);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 3)
                        kind = 3;
                  }
                  else if (curChar == 34)
                     jjCheckNAdd(16);
                  if (curChar == 13)
                     jjAddStates(0, 1);
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjAddStates(2, 3);
                  break;
               case 2:
                  if (curChar == 10 && kind > 4)
                     kind = 4;
                  break;
               case 15:
                  if (curChar == 34)
                     jjCheckNAdd(16);
                  break;
               case 16:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if (curChar == 34 && kind > 60)
                     kind = 60;
                  break;
               case 18:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  jjCheckNAdd(19);
                  break;
               case 21:
                  if ((0x2400L & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 22:
                  if (curChar == 13)
                     jjAddStates(0, 1);
                  break;
               case 23:
                  if (curChar == 10 && kind > 3)
                     kind = 3;
                  break;
               case 24:
                  if (curChar == 10 && kind > 63)
                     kind = 63;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 8:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     jjCheckNAdd(20);
                  }
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     jjCheckNAdd(20);
                  }
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 13:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     jjCheckNAdd(20);
                  }
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 3:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     jjCheckNAdd(20);
                  }
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     jjCheckNAdd(20);
                  }
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 0:
                  if (curChar == 87)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 5:
                  if (curChar == 78 && kind > 23)
                     kind = 23;
                  break;
               case 6:
               case 10:
                  if (curChar == 73)
                     jjCheckNAdd(5);
                  break;
               case 9:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 11:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 14:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 16:
                  jjAddStates(4, 5);
                  break;
               case 20:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(20);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(2, 3);
                  break;
               case 16:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(4, 5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 25 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa1_1(0x40L);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa2_1(active0, 0x40L);
      default :
         return 2;
   }
}
static private int jjMoveStringLiteralDfa2_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa3_1(active0, 0x40L);
      default :
         return 3;
   }
}
static private int jjMoveStringLiteralDfa3_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 82:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(3, 6);
         break;
      default :
         return 4;
   }
   return 4;
}
static final int[] jjnextStates = {
   23, 24, 1, 2, 16, 17, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\122", null, null, null, null, null, null, "\110\101\111", 
"\103\101\116", "\110\101\123", "\111\124\132", "\101", "\111", "\116", "\111\115", 
"\111\116", "\111\132", "\131\122", "\125\120", "\113\124\110\130", 
"\113\124\110\130\102\131\105", "\114\117\117\120", null, "\124\122\117\117\106", "\106\101\111\114", 
"\102\117\124\110", "\105\111\124\110\105\122", "\123\101\105\115", 
"\104\111\106\106\122\111\116\124", "\127\117\116", "\116\117\124", "\124\111\114", "\127\111\114\105", 
"\124\110\101\116", "\117\125\124\124\101", "\102\111\107\107\105\122", 
"\107\111\115\115\105\110", "\120\114\132", "\101\127\123\125\115\40\124\110\130", 
"\117\40\116\117\105\123", "\117\40\122\114\131", "\131\101\40\122\114\131", "\115\105\102\102\105", 
"\116\117\40\127\101\111", "\117\111\103", "\117\120\105\116", "\77", "\126\111\123\111\102\114\105", 
"\111\116\126\111\123\111\102\114\105", "\41\41", "\117\106", "\101\116", "\123\125\115", "\104\111\106\106", 
"\120\122\117\104\125\113\124", "\121\125\117\123\110\125\116\124", "\115\117\104", "\102\111\107\107\122", 
"\123\115\101\114\114\122", null, null, null, null, "\124\114\104\122", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "COMMENT_OPEN",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffff03L, 0x1L, 
};
static final long[] jjtoSkip = {
   0x7cL, 0x0L, 
};
static final long[] jjtoMore = {
   0x80L, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[25];
static private final int[] jjstateSet = new int[50];
static protected char curChar;
/** Constructor. */
public LolParserTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public LolParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 25; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000000L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 7)
         {
            jjmatchedKind = 7;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
