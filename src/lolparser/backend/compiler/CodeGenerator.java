package lolparser.backend.compiler;

import java.util.ArrayList;
import java.io.*;

import lolparser.frontend.*;
import lolparser.intermediate.*;
import lolparser.intermediate.symtabimpl.Predefined;
import lolparser.backend.*;

import static lolparser.intermediate.symtabimpl.SymTabKeyImpl.*;
import static lolparser.intermediate.symtabimpl.DefinitionImpl.*;

/**
 * <p>The code generator for a compiler back end.</p>
 *
 * <p>Copyright (c) 2008 by Ronald Mak</p>
 * <p>For instructional purposes only.  No warranties.</p>
 */
public class CodeGenerator extends Backend
{
    private static final int STACK_LIMIT = 16;
        
    static ICode iCode;
    static SymTabStack symTabStack;
    static PrintWriter objectFile;

    /**
     * Process the intermediate code and the symbol table generated by the
     * parser to generate machine-language instructions.
     * @param iCode the intermediate code.
     * @param symTabStack the symbol table stack.
     * @param objectFile the object file path for the generated code.
     * @throws Exception if an error occurred.
     */
    public void process(ICode iCode, SymTabStack symTabStack,
                        String objectFilePath)
        throws Exception
    {
    	CodeGenerator.iCode = iCode;
    	CodeGenerator.symTabStack = symTabStack;
        CodeGenerator.objectFile  = new PrintWriter(objectFilePath);

     // Make the program and method names.
        int start = objectFilePath.lastIndexOf("/") + 1;
        String programName = objectFilePath.substring(start);
        int end = programName.indexOf(".");
        if (end > -1) {
            programName = programName.substring(0, end);
        }
        programName = programName.substring(0, 1).toUpperCase() +
                      programName.substring(1);
        String methodName = programName.substring(0, 1).toLowerCase() +
                            programName.substring(1);
        
        
        SymTabEntry programId = symTabStack.getProgramId();
        
        
         //we never set this value in out .jjt
        
        
        //int localsCount =                (Integer) programId.getAttribute(ROUTINE_LOCALS_COUNT);
        SymTab routineSymTab = 
                (SymTab) programId.getAttribute(ROUTINE_SYMTAB);
        ArrayList<SymTabEntry> locals = routineSymTab.sortedEntries();

        // Generate the program header.
        objectFile.println(".class public " + programName);
        objectFile.println(".super java/lang/Object");
        objectFile.println();
        
        
     // Generate code for the timer and standard input fields.
//        objectFile.println(".field private static _runTimer LRunTimer;");
//        objectFile.println(".field private static _standardIn LPascalTextIn;");
        objectFile.println();
        
        
        
        /////////Generate the class constructor
        
        
        
     // Generate the main method header.
        objectFile.println(".method public static main([Ljava/lang/String;)V");
        objectFile.println();
        
        // Generate the main method prologue.
//        objectFile.println("    new	 RunTimer");
//        objectFile.println("    dup");
//        objectFile.println("    invokenonvirtual	RunTimer/<init>()V");
//        objectFile.println("    putstatic	" + programName +
//        		           "/_runTimer LRunTimer;");
//        objectFile.println("    new	 PascalTextIn");
//        objectFile.println("    dup");
//        objectFile.println("    invokenonvirtual	PascalTextIn/<init>()V");
//        objectFile.println("    putstatic	" + programName +
//        		           "/_standardIn LPascalTextIn;");
        
        
        /*
         * The following is the println instruction. Push the string onto the stack, then call
         * println.
         * 
         * I'm not sure how to get the PascalTextIn or RunTimer to work, so I commented those out for now
         *
         */
        
        //; push System.out onto the stack
        objectFile.println("getstatic java/lang/System/out Ljava/io/PrintStream;");
        //; push a string onto the stack
        objectFile.println("ldc \"Hello World!\"");
        //; call the PrintStream.println() method.
        objectFile.println("invokevirtual java/io/PrintStream/println(Ljava/lang/String;)V");
        
        objectFile.println();
        objectFile.flush();

        
        // Visit the parse tree nodes to generate code 
        // for the main method's compound statement.
        CodeGeneratorVisitor codeVisitor = new CodeGeneratorVisitor();
        Node rootNode = iCode.getRoot();
        rootNode.jjtAccept(codeVisitor, programName);
        objectFile.println();
        
        
        
     // Generate the main method epilogue.
//        objectFile.println("    getstatic	" + programName +
//        		           "/_runTimer LRunTimer;");
//        objectFile.println("    invokevirtual	RunTimer.printElapsedTime()V");
        objectFile.println();
        objectFile.println("    return");
        objectFile.println();
        objectFile.println(".limit locals " + 100/*This is hardcoded because we never set ROUTINE_LOCALS_COUNT in out .jjt*/);
        				/// Should be the number of local variables in the file. We may be 
        				/// able to get this from counting symbol table entries. Not sure though
        objectFile.println(".limit stack  " + STACK_LIMIT);
        objectFile.println(".end method");
        objectFile.flush();

        CodeGenerator.objectFile.close();
        
    }
}
