/**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  VISITOR=true;
  MULTI=true;
  DEBUG_PARSER=true;
}

PARSER_BEGIN(LolParser)
import java.io.FileReader;
import java.io.FileNotFoundException;

public class LolParser
{
  public static void main(String args [])
  {
    try
    {  
	    if(args.length >= 1) {
			System.out.println("Reading from file: " +args[0]);
			new LolParser(new FileReader(args[0]));
	    } else {
			System.out.println("Reading from standard input...");
			new LolParser(System.in);
	    }
	} catch (FileNotFoundException fnfe) {
		System.out.println(args[0] + " was not able to be found.");
	}
    
    try
    {
      LolParser.parse();
      //n.dump("");
      System.out.println("---Finished Parsing!---");
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }
}
PARSER_END(LolParser)

void parse(): {StringBuffer buf = new StringBuffer();}
{
  < HAI >(<EOL>)+
   (block())?
  < KTHXBYE > (<EOL>)*
  < EOF >
}

void block():{}
{
  statement()
}
void statement():{}
{
  AssignmentStatement()
| FlowControlStatement() 

}

void AssignmentStatement():{}
{
  < ASSIGNMENT_STMT : <I> <HAS> <A> <IDENT> <EOL>>	
}

void FlowControlStatement():{}
{
  loop()
}

// vvv Arithemic Operations vvv \\
//void ArthemticExpression():{}
//{
//  SUM() 	// Add
//| DIFF() 	// Subtract
//| PRODUKT() // Product
//| QUOSHUNT()// Quotient
//| MOD() 	// Modulous
//| BIGGR() 	// Max
//| SMALLR() 	// Min
//}
//void SUM(): {} 	// Add
//{
//	
//}
//void DIFF(): {} // Subtract
//{
//	
//}
//void PRODUKT(): {} // Product
//{
//	
//}
//void QUOSHUNT(): {} // Quotient
//{
//	
//}
//void MOD(): {} // Modulous
//{
//	
//}
//void BIGGR(): {} // Max
//{
//	
//}
//void SMALLR(): {} // Min
//{
//	
//}
// ^^^ Arithemic Expressions ^^^ \\

// vvv Boolean Expressions vvv \\
//void BooleanOperation():{}
//{
//
//}
 
// ^^^ Boolean Expressions ^^^ \\

// vvv LOOP vvv \\
void loop(): {}
{
  {System.out.println("<LOOP>");}    
     <IM><IN><YR> <LOOP_LABEL> //(<LOOP_OP> <YR> <IDENT> ((<TIL>|<WILE>) Expression() )?)?
     	block()
  <IM><OUTTA><YR> <LOOP_LABEL>
  {System.out.println("<LOOP>");}
}
// ^^^ LOOP ^^^ \\

SKIP :
{
  " "
| < COMMENT :
	"BTW" (~["\n"])* "\n"
	>
}

TOKEN :
{
  < HAI : "HAI" >
| < CAN : "CAN" >
| < HAS : "HAS" >
| < A : "A" >
| < I : "I" >
| < N : "N" >
| < IM : "IM" >
| < IN : "IN" >
| < IZ : "IZ" >
| < YR : "YR" >
| < UP : "UP" >
| < KTHX : "KTHX" >
| < KTHXBYE : "KTHXBYE" >
| < LOOP_LABEL : "LOOP" >
| < LOOP_OP : "UPPIN" | "NERFIN">
| < TROOF : "TROOF">
| < FAIL : "FAIL">
| < TIL : "TIL" >
| < WILE : "WILE" > 
| < THAN : "THAN" >
| < OUTTA : "OUTTA" >
| < BIGGER : "BIGGER" >
| < GIMMEH : "GIMMEH" >
| < PLZ : "PLZ" >
| < AWSUM_THX : "AWSUM THX" >
| < O_NOES : "O NOES" >
| < O_RLY : "O RLY" >
| < YA_RLY : "YA RLY" >
| < NO_WAI : "NO WAI" >
| < OPEN : "OPEN" >
| < QUESTION : "?" >
| < VISIBLE : "VISIBLE" >
| < INVISIBLE : "INVISIBLE" >
| < BANG : "!!" >
| < QUOTED_STRING : "\"" (~["\""])+ "\"" >
| < INTEGER : ["1"-"9"] (["0"-"9"])* >
| < IDENT : (["A"-"Z"])+ >
| < EOL : "\n" | "\r" | "\r\n" >
}



