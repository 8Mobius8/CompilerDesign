/**
 * CS 153 Compiler Design : Fall 2014
 * The Almost Donerz
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = true;}PARSER_BEGIN(EG1)
public class EG1{  public static void main(String args []) throws ParseException  {    EG1 parser = new EG1(System.in);    while (true)    {      System.out.println("Reading from standard input...");      System.out.print("Enter an expression like \"1+(2+3)*4;\" :");      try      {        switch (EG1.one_line())        {          case 0 :           System.out.println("OK.");          break;          case 1 :           System.out.println("Goodbye.");          break;          default :           break;        }      }      catch (Exception e)      {        System.out.println("NOK.");        System.out.println(e.getMessage());        EG1.ReInit(System.in);      }      catch (Error e)      {        System.out.println("Oops.");        System.out.println(e.getMessage());        break;      }    }  }}PARSER_END(EG1)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN : /* OPERATORS */{  < PLUS : "+" >| < MINUS : "-" >| < MULTIPLY : "*" >| < DIVIDE : "/" >}TOKEN :{  < CONSTANT : (< DIGIT >)+ >| < #DIGIT : [ "0"-"9" ] >
| < UPPERCASE : ["A" - "Z"] >
| < LOWERCASE : ["a" - "z"] >}
TOKEN : /* RESERVED WORD TOKENS */
{	< RESERVED_WORD : "abstract" | "assert" | "boolean" | "break" | "byte" | "case"
| "catch" | "char" | "class" | "const" | "continue" | "default" | "do" | "double"
| "else" | "enum" | "extends" | "false" | "final" | "finally" | "float" | "for" | "goto"
|  "if" | "implements" | "import" | "instanceof" | "int" | "interface" | "long" | "native"
| "new" | "null" | "package" | "private" | "protected" | "public" | "return" | "short"
| "static" | "strictfp" | "super" | "switch" | "synchronized" | "this" | "throw"
| "throws" | "transient" | "true" | "try" | "void" | "volatile" | "while">

}

TOKEN : /* IDENTIFIER */
{	< ALPHABET : < UPPERCASE > | < LOWERCASE > >
| 	< IDENTIFIER : (< ALPHABET >)+ (< ALPHABET > < DIGIT >)* >
}

TOKEN : /* COMMENT TOKENS */
{	< SINGLE_LINE_COMMENT : "//" >
| 	< COMMENT_OPEN : "/*" >
| 	< COMMENT_CLOSE : "*/" >
}

TOKEN : /* SPECIAL SYMBOL TOKENS */
{	< SPECIAL_SYMBOL : "~" | "!" | "@" | "%" | "^" | "&" | "*" | "-" | "+" | "="
| "|" | "/" | ":" | ";" | "?" | "< " | " >" | "." | ","
| "'" | "\"" | "(" | ")" | "[" | "]" | "{" | "}" 
| "++" | "--" | "<<" | " >>" | "<=" | ">=" | "+=" | "-=" | "*=" | "/="
|  "==" | "|=" | "%=" | "&=" | "^=" | "||" | "&&" | "!=" | "<<=" | ">>="  >
}
int one_line() :{}{  sum() ";"  {    return 0;  }| ";"  {    return 1;  }}void sum() :{}{  term()  (    (      < PLUS >    | < MINUS >    )    term()  )*}void term() :{}{  unary()  (    (      < MULTIPLY >    | < DIVIDE >    )    unary()  )*}void unary() :{}{  < MINUS > element()| element()}void element() :{}{  < CONSTANT >| "(" sum() ")"}


