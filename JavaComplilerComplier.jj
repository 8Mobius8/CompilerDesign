/**
 * CS 153 Compiler Design : Fall 2014
 * The Almost Donerz
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options {    OUTPUT_DIRECTORY = "src";
  DEBUG_PARSER = true;
  STATIC = false;}PARSER_BEGIN(FileParser)import java.io.*;
public class FileParser{  public static void main(String args []) throws ParseException, FileNotFoundException  {    Reader sr = new FileReader("input.txt");
	FileParser parser = new FileParser(sr);


    do    {		parser.parse();    } while (parser.token.kind != EOF);

//    try {//	    parser.parse();//	    //    } //    catch (ParseException ex) {//      ex.printStackTrace();//    }  }}PARSER_END(FileParser)
void parse() : {
  StringBuffer buf = new StringBuffer();}{
  <RESERVED_WORD> 	{buf.append("(").append(token.image).append(") ");}
| <IDENTIFIER>		{buf.append("(").append(token.image).append(") ");}
| <SPECIAL_SYMBOL> 	{buf.append("(").append(token.image).append(") ");}
| < EOF >}
SKIP :{
  < "//" (~["\n"])* "\n" >
| "/*" : COMMENT_OPEN| " "| "\r"| "\t"| "\n"}

< COMMENT_OPEN > SKIP :
{  "*/" : DEFAULT
}

< COMMENT_OPEN > MORE:
{  < ~[] >
}
TOKEN :{  < CONSTANT : (< DIGIT >)+ >| <#DIGIT  : ["0"-"9"]>
| <#NATURAL: ["1"-"9"]>
| <#LETTER : ["a"-"z"]>
| <#UPPER_LETTER : ["A" - "Z"] >

// Reserved Word Tokens
| < RESERVED_WORD : "abstract" | "assert" | "boolean" | "break" | "byte" | "case"
| "catch" | "char" | "class" | "const" | "continue" | "default" | "do" | "double"
| "else" | "enum" | "extends" | "false" | "final" | "finally" | "float" | "for" | "goto"
|  "if" | "implements" | "import" | "instanceof" | "int" | "interface" | "long" | "native"
| "new" | "null" | "package" | "private" | "protected" | "public" | "return" | "short"
| "static" | "strictfp" | "super" | "switch" | "synchronized" | "this" | "throw"
| "throws" | "transient" | "true" | "try" | "void" | "volatile" | "while">


| < ALPHABET : < LETTER > | < UPPER_LETTER > >

// Identifier
| <IDENTIFIER : <ALPHABET> (<ALPHABET> | <DIGIT> | "_")*>


// REAL
| <REAL : < DECIMAL > < FRAC > (< EXP >)? >
| < #DECIMAL : < NATURAL > (< DIGIT >)* >
| < #FRAC : ("." (< DIGIT >)+)? >
| < #EXP: ["e","E"] (["+","-"])? (< DIGIT >)+ >

// CHARACTER
| < CHARACTER : ["'"] < ALPHABET > ["'"] >

// INTEGER
| < INTEGER : < NATURAL > (< DIGIT >)*
	| "0" (["0" - "7"])*
	| "0" ["X", "x"] (< DIGIT > | ["A" - "F"])*>

// Special Symbol Tokens
| < SPECIAL_SYMBOL : "~" | "!" | "@" | "%" | "^" | "&" | "*" | "-" | "+" | "="
| "|" | "/" | ":" | ";" | "?" | "< " | " >" | "." | ","
| "'" | "\"" | "(" | ")" | "[" | "]" | "{" | "}" 
| "++" | "--" | "<<" | " >>" | "<=" | ">=" | "+=" | "-=" | "*=" | "/="
|  "==" | "|=" | "%=" | "&=" | "^=" | "||" | "&&" | "!=" | "<<=" | ">>="  >



// Still within TOKEN}
